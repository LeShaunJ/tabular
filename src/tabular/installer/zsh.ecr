#compdef <%= program %>
compdef _<%= var_name %> <%= program %>
<%- unless alternate.empty? %>
alias <%= program %>='<%= alternate %>'
<% end -%>

# <%= shell %> completion for <%= program %> -*- shell-script -*-
# See: https://github.com/spf13/cobra/raw/refs/heads/main/<%= shell %>_completions.go

__<%= var_name %>_debug() {
	local file="$TABULAR_LOG_FILE"
	if [[ -n ${file} ]]; then
		echo "$*" >> "${file}"
	fi
}

_<%= var_name %>() {
	local shellCompDirectiveError=<%= Directive::Error.value %>
	local shellCompDirectiveNoSpace=<%= Directive::NoSpace.value %>
	local shellCompDirectiveNoFileComp=<%= Directive::NoFile.value %>
	local shellCompDirectiveFilterFileExt=<%= Directive::FilterExt.value %>
	local shellCompDirectiveFilterDirs=<%= Directive::FilterDir.value %>
	local shellCompDirectiveKeepOrder=<%= Directive::KeepOrder.value %>

	local lastParam lastChar flagPrefix requestComp out directive comp lastComp noSpace keepOrder
	local -a completions

	__<%= var_name %>_debug "\n========= starting completion logic =========="
	__<%= var_name %>_debug "CURRENT: ${CURRENT}, words[*]: ${words[*]}"

	words=("${=words[1,CURRENT]}")
	__<%= var_name %>_debug "Truncated words[*]: ${words[*]},"

	lastParam=${words[-1]}
	lastChar=${lastParam[-1]}
	__<%= var_name %>_debug "lastParam: ${lastParam}, lastChar: ${lastChar}"

	setopt local_options BASH_REMATCH
	if [[ "${lastParam}" =~ '-.*=' ]]; then
		flagPrefix="-P ${BASH_REMATCH}"
	fi

	requestComp="${words[1]} <%= command %> ${words[2,-1]}"
	if [ "${lastChar}" = "" ]; then
		__<%= var_name %>_debug "Adding extra empty parameter"
		requestComp="${requestComp} \"\""
	fi

	__<%= var_name %>_debug "About to call: ${requestComp[@]}"

	out=$(eval ${requestComp} 2>/dev/null)
	__<%= var_name %>_debug "completion output: ${out}"

	local lastLine
	while IFS='\n' read -r line; do
		lastLine=${line}
	done < <(printf "%s\n" "${out[@]}")
	__<%= var_name %>_debug "last line: ${lastLine}"

	if [ "${lastLine[1]}" = : ]; then
		directive=${lastLine[2,-1]}
		local suffix
		(( suffix=${#lastLine}+2))
		out=${out[1,-$suffix]}
	else
		__<%= var_name %>_debug "No directive found.  Setting do default"
		directive=0
	fi

	__<%= var_name %>_debug "directive: ${directive}"
	__<%= var_name %>_debug "completions: ${out}"
	__<%= var_name %>_debug "flagPrefix: ${flagPrefix}"

	if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
		__<%= var_name %>_debug "Completion received error. Ignoring completions."
		return
	fi

	local activeHelpMarker="<%= ACTIVE_HELP_MARKER %>"
	local endIndex=${#activeHelpMarker}
	local startIndex=$((${#activeHelpMarker}+1))
	local hasActiveHelp=0
	while IFS='\n' read -r comp; do
		if [ "${comp[1,$endIndex]}" = "$activeHelpMarker" ];then
			__<%= var_name %>_debug "ActiveHelp found: $comp"
			comp="${comp[$startIndex,-1]}"
			if [ -n "$comp" ]; then
				compadd -x "${comp}"
				__<%= var_name %>_debug "ActiveHelp will need delimiter"
				hasActiveHelp=1
			fi

			continue
		fi

		if [ -n "$comp" ]; then
			comp=${comp//:/\\:}

			local tab="$(printf '\t')"
			comp=${comp//$tab/:}

			__<%= var_name %>_debug "Adding completion: ${comp}"
			completions+=${comp}
			lastComp=$comp
		fi
	done < <(printf "%s\n" "${out[@]}")

	if [ $hasActiveHelp -eq 1 ]; then
		if [ ${#completions} -ne 0 ] || [ $((directive & shellCompDirectiveNoFileComp)) -eq 0 ]; then
			__<%= var_name %>_debug "Adding activeHelp delimiter"
			compadd -x "--"
			hasActiveHelp=0
		fi
	fi

	if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
		__<%= var_name %>_debug "Activating nospace."
		noSpace="-S ''"
	fi

	if [ $((directive & shellCompDirectiveKeepOrder)) -ne 0 ]; then
		__<%= var_name %>_debug "Activating keep order."
		keepOrder="-V"
	fi

	if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
		local filteringCmd
		filteringCmd='_files'
		for filter in ${completions[@]}; do
			if [ ${filter[1]} != '*' ]; then
				filter="\*.$filter"
			fi
			filteringCmd+=" -g $filter"
		done
		filteringCmd+=" ${flagPrefix}"

		__<%= var_name %>_debug "File filtering command: $filteringCmd"
		_arguments '*:filename:'"$filteringCmd"
	elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
		local subdir
		subdir="${completions[1]}"
		if [ -n "$subdir" ]; then
			__<%= var_name %>_debug "Listing directories in $subdir"
			pushd "${subdir}" >/dev/null 2>&1
		else
			__<%= var_name %>_debug "Listing directories in ."
		fi

		local result
		_arguments '*:dirname:_files -/'" ${flagPrefix}"
		result=$?
		if [ -n "$subdir" ]; then
			popd >/dev/null 2>&1
		fi
		return $result
	else
		__<%= var_name %>_debug "Calling _describe"
		if eval _describe $keepOrder "completions" completions $flagPrefix $noSpace; then
			__<%= var_name %>_debug "_describe found some completions"

			return 0
		else
			__<%= var_name %>_debug "_describe did not find completions."
			__<%= var_name %>_debug "Checking if we should do file completion."
			if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
				__<%= var_name %>_debug "deactivating file completion"

				return 1
			else
				__<%= var_name %>_debug "Activating file completion"

				_arguments '*:filename:_files'" ${flagPrefix}"
			fi
		fi
	fi
}

if [ "$funcstack[1]" = "_<%= var_name %>" ]; then
	_<%= var_name %>
fi
