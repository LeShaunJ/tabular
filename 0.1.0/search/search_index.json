{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>Provide <code>go-cobra</code>-style tab-completions for your Crystal CLI. While  it is opinionated in it's adherence to the <code>go-cobra</code> completions  pattern, it does not care how you get there.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Add the dependency to your <code>shard.yml</code>:</li> </ol> <pre><code>dependencies:\n  tabular:\n    github: leshaunj/tabular\n</code></pre> <ol> <li>Install the dependency:</li> </ol> <pre><code>shards install\n</code></pre>"},{"location":"#why-tabular","title":"Why Tabular?","text":"<p>In keeping with the Crystal theme, <code>Tabular</code> concepts are based on the tabular crystal habit, a formation characteristic taken on by minerals like Wulfenite. That, plus tab (completions); ah, you get it...</p>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Tabular<ul> <li>Completers</li> <li>Directive</li> <li>Error<ul> <li>Any</li> <li>Argument</li> <li>Install</li> <li>Match</li> <li>Support</li> </ul> </li> <li>Habit</li> <li>Kind</li> <li>Log</li> <li>Replier</li> <li>Tablet</li> <li>Tablets</li> </ul> </li> </ul>"},{"location":"summary/","title":"Summary","text":"<ul> <li>Intro<ul> <li>Usage</li> <li>Changelog</li> <li>License</li> </ul> </li> <li>Library</li> <li>Contributing</li> </ul>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#basics","title":"Basics","text":"<p>Ensure <code>Tabular</code> is imported into your project:</p> <pre><code>require \"tabular\"\n</code></pre> <p><code>Tabular.prompt?</code> is convenience method that checks for the CLI command (<code>__complete</code> by default) the shells will use to retrieve completions:</p> <pre><code>if Tabular.prompt?\n  # do stuff\nend\n</code></pre> <p>Of course, you can always handle this however you'd like.</p>"},{"location":"usage/#concepts","title":"Concepts","text":"<p>Beyond the insanely on-brand synergy of both platform and use-case, so to are the concepts in <code>Tabular</code>. Miraculously.</p>"},{"location":"usage/#habit","title":"Habit","text":"<p>A <code>Habit</code> is the environment in which various features are made available for your completion to take form. This done within the <code>block</code> of the <code>Tabular.form</code> method:</p> <pre><code>if Tabular.prompt?\n  Tabular.form do\n    # define your completions\n  end\nend\n</code></pre>"},{"location":"usage/#tablets","title":"Tablets","text":"<p>A <code>Tablet</code> represents any possible suggestion the end-user will receive, given the current  argument. <code>Tabular</code> comes with three built-in <code>Tablet</code>:Tablet] styles:</p> <pre><code>require \"tabular\"\n\nif Tabular.prompt?\n  Tabular.form do\n    option \"--opt\" \"-o\", help: \"a flag parameter\"\n\n    option \"--arg\" \"-a\", help: \"a option with any argument\" { argument }\n\n    option \"--file\" \"-f\", help: \"a option with file extension-specific argument\" {\n      argument \"yaml\", \"yml\", \"json\", directives: :filter_ext\n    }\n\n    option \"--dir\" \"-d\", help: \"a option with directory-specific argument\" {\n      argument directives: :filter_dir\n    }\n\n    option \"--opt2\", help: \"a flag with multiple arguments\" do\n      argument \"arg1_choice1\", \"arg1_choice2\", \"arg1_choice3\"\n      argument \"arg2_choice1\", \"arg2_choice2\"\n    end\n\n    command \"cmd1\", \"cmd1_alias1\", \"cmd1_alias2\", help: \"a subcommand\"\n  end\nend\n</code></pre> <p>Tip</p> <p>You can also create you own bespoke <code>Tablets</code> with the base <code>Tablet</code> class.</p>"},{"location":"usage/#dispatch","title":"Dispatch","text":"<p>When a <code>Command</code>-flavoured <code>Tablet</code> is matched, control is handed back to your CLI via the <code>#dispatch</code> <code>block</code> when defined:</p> <pre><code>require \"tabular\"\n\nif Tabular.prompt?\n  Tabular.form do\n    command \"validate\", \"valid\", help: \"validate infrastructure\"\n    command \"config\", \"conf\", \"c\", help: \"get/set configs\"\n\n    dispatch do |command|\n      if command.name == \"cmd1\"\n        Validate.complete\n      end\n      if command.name == \"cmd2\"\n        Config.complete\n      end\n  end\nend\n\nclass Validate\n  # ...\n\n  def complete(args = ARGV)\n    Tabular.form do\n      option \"--verbose\" \"-v\"\n      option \"--dry-run\" \"-n\"\n\n      argument \"tf\", directive: :filter_ext\n    end\n  end\nend\n\nclass Config\n  # ...\n\n  def complete(args = ARGV)\n    Tabular.form do\n      argument \"*/config/*\", directive: :filter_dir\n      argument \"json\", \"ejson\", directive: :filter_ext\n    end\n  end\nend\n</code></pre> <p>Any unhandled <code>Habit#command</code> <code>Tablets</code> will fallback to  default completion behaviour for the given shell; but, you can override this behaviour:</p> <pre><code>Tabular.form do\n  # Globally override default command directives\n  directives :command, :no_file\n\n  # Override command deirectives\n  command \"action1\", \"act1\", help: \"A subcommand\", directives: :no_file\nend\n</code></pre>"},{"location":"usage/#flow","title":"Flow","text":"<pre><code>sequenceDiagram\n  participant Begin as BEGIN\n  participant Opts as OPTION[ ARGUMENT][ ...]\n  participant Args as ARGUMENT[ ...]\n\n  loop\n    Opts--&gt;&gt;Args: followed by\n    participant Cmd as COMMAND\n    Opts--&gt;&gt;Cmd: followed by\n    create participant Sub as ...\n    Cmd--&gt;&gt;Sub: followed by\n    destroy Sub\n    Sub--&gt;&gt;Begin: dispatch\n  end\n\n  participant Done as END\n  Opts--&gt;&gt;Done: done\n  Args--&gt;&gt;Done: done\n  Cmd--&gt;&gt;Done: done</code></pre> <p>While, there is no mineral-based connection, it's important to understand the assumed flow of the built-in <code>Tablets</code>:</p> <ul> <li>The flow begins with any <code>Tablet</code> flavour.   <pre><code>cli {OPTIONS[ ARGUMENTS] ... | ARGUMENTS ... | COMMAND ...}\n</code></pre></li> <li>A <code>Option</code> (and any required <code>Argument</code>)    flavour can appear anywhere in the flow.</li> <li>A <code>Command</code> flavour can only follow an <code>Argument</code>   flavour when it a part of an <code>Option</code>.   <pre><code>cli [OPTIONS[ ARGUMENTS] ...] {ARGUMENTS ... | COMMAND ...}\n</code></pre></li> <li>Once a <code>Command</code> flavour is matched:</li> <li>The flow resets when <code>#dispatch</code> is defined.</li> <li>Otherwise, the flow ends.</li> <li>Once a final <code>Option</code> or <code>Argument</code>   flavour is matched, the flow ends.</li> </ul> <p>Tip</p> <p>You can leverage the API to create your own bespoke flow.</p>"},{"location":"usage/#installer","title":"Installer","text":"<p>Finally\u2014to allow your users to setup completions in their shell\u2014call <code>Tabular.install!</code> when a subcommand of your choosing is provided to your CLI:</p> <p>Tip</p> <p>It's recommended that you use the subcommand <code>completion</code>, as it follows the  <code>go-cobra</code> standard.</p> <pre><code>require \"tabular\"\n\nif ARGV[0]? == \"completion\"\n  ARGV.shift\n\n  begin\n    # Read arguments from `ARGV` or supply your own\n    Tabular.install! # [\"bash\"]\n  rescue e : Tabular::Error\n    STDERR.puts e\n    exit 1\n  end\nend\n</code></pre>"},{"location":"Tabular/","title":"Library","text":""},{"location":"Tabular/#Tabular","title":"module <code>Tabular(T)</code>","text":"<p>The <code>Tabular</code> library.</p>"},{"location":"Tabular/#Tabular-class-methods","title":"Class methods","text":""},{"location":"Tabular/#Tabular.form(args,&)","title":"<code>.form(args : Array(String) = ARGV, &amp;) : Bool</code>","text":"<p>Define a set of <code>Tablets</code> and an optional <code>Habit#dispatch</code>.</p> <pre><code>Tabular.form do\n  option \"--opt1\" \"-f\", help: \"a flag parameter\"\n\n  option \"--opt2\" \"-a\", help: \"a optiona with argument\" { argument }\n\n  option \"--opt2\", help: \"a flag with multiple arguments\" do\n    argument \"arg1_choice1\", \"arg1_choice2\", \"arg1_choice3\"\n    argument \"arg2_choice1\", \"arg2_choice2\"\n  end\n\n  command \"cmd1\", \"cmd1_alias\", help: \"a subcommand\"\n\n  # An optional handler for command tablets\n  dispatch do |command|\n    if command.name == \"cmd1\"\n      Subcommand1.complete ARGV\n    end\n  end\nend\n</code></pre> View source"},{"location":"Tabular/#Tabular.install!(args,*,program,command)","title":"<code>.install!(args = ARGV, *, program : String = PROGRAM_NAME, command = Tabular.prompt)</code>","text":"<p>Sends a completion script for the <code>&lt;shell&gt;</code> specified in args.</p> <ul> <li>args: A list of user-specified arguments for the installer.</li> <li> <ul> <li><code>&lt;shell&gt;</code>: The shell to install the completions for (supports: <code>bash</code>, <code>fish</code>, <code>zsh</code>).</li> </ul> </li> <li> <ul> <li><code>--development &lt;path&gt;</code>: An alternate path to alias the CLI name to.</li> </ul> </li> <li>program: The name of the CLI program. Best not to set this one.</li> <li>command: The subcommand the completion script will call to get completions.</li> </ul> <p>Raises:</p> <ul> <li><code>Error::Argument</code> \u2014 For malformed CLI arguments.</li> <li><code>Error::Support</code> \u2014 If shell is unsupported.</li> </ul> View source"},{"location":"Tabular/#Tabular.install?(arg,*,prompt)","title":"<code>.install?(arg = ARGV, *, prompt = \"completion\")</code>","text":"<p>Retrun <code>true</code> and shift, if the first element in args i the prompt. to install a completion script.</p> View source"},{"location":"Tabular/#Tabular.prompt","title":"<code>.prompt : String</code>","text":"<p>Return the name of the CLI argument that will prompt completions.</p> View source"},{"location":"Tabular/#Tabular.prompt=(value)","title":"<code>.prompt=(value : String)</code>","text":"<p>Set the name of the CLI argument that will prompt completions.</p> View source"},{"location":"Tabular/#Tabular.prompt?(args)","title":"<code>.prompt?(args = ARGV)</code>","text":"<p>Retrun <code>true</code> and shift, if the first element in args is the <code>Tabular.prompt</code>.</p> View source"},{"location":"Tabular/Completers/","title":"Completers","text":""},{"location":"Tabular/Completers/#Tabular::Completers","title":"module <code>Tabular::Completers</code>","text":"<p>A collection of convenience functions to handle completion situations.</p>"},{"location":"Tabular/Completers/#Tabular::Completers-class-methods","title":"Class methods","text":""},{"location":"Tabular/Completers/#Tabular::Completers.install(args)","title":"<code>.install(args = ARGV)</code>","text":"<p>A convenience completer for a CLI's completion installer command.</p> <pre><code>if Tabular.prompt?\n  ARGV.shift\n\n  if ARGV[0]? == \"completion\"\n    ARGV.shift\n\n    Tabular::Completers.install\n  end\nend\n</code></pre> View source"},{"location":"Tabular/Directive/","title":"Directive","text":""},{"location":"Tabular/Directive/#Tabular::Directive","title":"enum <code>Tabular::Directive</code>","text":"<p>A bit map representing the different behaviors the shell can be instructed to have once completions have been provided.</p>"},{"location":"Tabular/Directive/#Tabular::Directive-members","title":"Members","text":""},{"location":"Tabular/Directive/#Tabular::Directive::None","title":"<code>None = 0</code>","text":"<p>Indicates to let the shell perform its default behavior after completions have been provided.</p>"},{"location":"Tabular/Directive/#Tabular::Directive::Error","title":"<code>Error = 1</code>","text":"<p>Indicates an error occurred and completions should be ignored.</p>"},{"location":"Tabular/Directive/#Tabular::Directive::NoSpace","title":"<code>NoSpace = 2</code>","text":"<p>Indicates that the shell should not add a space after the completion even if there is a single completion provided.</p>"},{"location":"Tabular/Directive/#Tabular::Directive::NoFile","title":"<code>NoFile = 4</code>","text":"<p>Indicates that the shell should not provide file completion even when no completion is provided.</p>"},{"location":"Tabular/Directive/#Tabular::Directive::FilterExt","title":"<code>FilterExt = 8</code>","text":"<p>Indicates that the provided completions should be used as file extension filters.</p>"},{"location":"Tabular/Directive/#Tabular::Directive::FilterDir","title":"<code>FilterDir = 16</code>","text":"<p>Indicates that only directory names should be provided in file completion.</p>"},{"location":"Tabular/Directive/#Tabular::Directive::KeepOrder","title":"<code>KeepOrder = 32</code>","text":"<p>Indicates that the shell should preserve the order in which the completions are provided</p>"},{"location":"Tabular/Directive/#Tabular::Directive::All","title":"<code>All = 63</code>","text":""},{"location":"Tabular/Directive/#Tabular::Directive-methods","title":"Methods","text":""},{"location":"Tabular/Directive/#Tabular::Directive#error?","title":"<code>#error?</code>","text":"<p>Returns <code>true</code> if this enum value contains <code>Error</code></p> View source"},{"location":"Tabular/Directive/#Tabular::Directive#filter_dir?","title":"<code>#filter_dir?</code>","text":"<p>Returns <code>true</code> if this enum value contains <code>FilterDir</code></p> View source"},{"location":"Tabular/Directive/#Tabular::Directive#filter_ext?","title":"<code>#filter_ext?</code>","text":"<p>Returns <code>true</code> if this enum value contains <code>FilterExt</code></p> View source"},{"location":"Tabular/Directive/#Tabular::Directive#keep_order?","title":"<code>#keep_order?</code>","text":"<p>Returns <code>true</code> if this enum value contains <code>KeepOrder</code></p> View source"},{"location":"Tabular/Directive/#Tabular::Directive#no_file?","title":"<code>#no_file?</code>","text":"<p>Returns <code>true</code> if this enum value contains <code>NoFile</code></p> View source"},{"location":"Tabular/Directive/#Tabular::Directive#no_space?","title":"<code>#no_space?</code>","text":"<p>Returns <code>true</code> if this enum value contains <code>NoSpace</code></p> View source"},{"location":"Tabular/Directive/#Tabular::Directive#none?","title":"<code>#none?</code>","text":"<p>Returns <code>true</code> if this enum value contains <code>None</code></p> View source"},{"location":"Tabular/Directive/#Tabular::Directive#show","title":"<code>#show</code>","text":"<p>Returns the <code>String</code> representation that will be sent to the shell.</p> View source"},{"location":"Tabular/Error/","title":"Error","text":""},{"location":"Tabular/Error/#Tabular::Error","title":"module <code>Tabular::Error</code>","text":"<p>A collection of exceptions specific to <code>Tabular</code>.</p>"},{"location":"Tabular/Error/Any/","title":"Any","text":""},{"location":"Tabular/Error/Any/#Tabular::Error::Any","title":"class <code>Tabular::Error::Any</code> inherits <code>Exception</code>","text":"<p>A base exception that all <code>Error</code> exceptions can be caught with.</p> Direct known subclasses <code>Tabular::Error::Argument</code> <code>Tabular::Error::Install</code> <code>Tabular::Error::Match</code> <code>Tabular::Error::Support</code>"},{"location":"Tabular/Error/Argument/","title":"Argument","text":""},{"location":"Tabular/Error/Argument/#Tabular::Error::Argument","title":"class <code>Tabular::Error::Argument</code> inherits <code>Tabular::Error::Any</code>","text":"<p>Raised when method arguments are incorrect or missing.</p>"},{"location":"Tabular/Error/Install/","title":"Install","text":""},{"location":"Tabular/Error/Install/#Tabular::Error::Install","title":"class <code>Tabular::Error::Install</code> inherits <code>Tabular::Error::Any</code>","text":"<p>Raised on issues with the installer.</p>"},{"location":"Tabular/Error/Match/","title":"Match","text":""},{"location":"Tabular/Error/Match/#Tabular::Error::Match","title":"class <code>Tabular::Error::Match</code> inherits <code>Tabular::Error::Any</code>","text":"<p>Raised when an argument that must <code>Tablet</code> does not.</p>"},{"location":"Tabular/Error/Support/","title":"Support","text":""},{"location":"Tabular/Error/Support/#Tabular::Error::Support","title":"class <code>Tabular::Error::Support</code> inherits <code>Tabular::Error::Any</code>","text":"<p>Raised when a configuration is unsupported.</p>"},{"location":"Tabular/Habit/","title":"Habit","text":""},{"location":"Tabular/Habit/#Tabular::Habit","title":"class <code>Tabular::Habit</code> inherits <code>Reference</code>","text":"<p>A class that manages the formation of a set of <code>Tablets</code> within the <code>block</code> of <code>Tabular.form</code>.</p>"},{"location":"Tabular/Habit/#Tabular::Habit-methods","title":"Methods","text":""},{"location":"Tabular/Habit/#Tabular::Habit#argument(choices,help,directives)","title":"<code>#argument(choices : Array(String), help = \"\", directives : Directable | Nil = nil)</code>","text":"<p>Create a <code>Argument</code>-flavoured <code>Tablet</code>.</p> <ul> <li>choices: A set of possible values for the argument. If <code>empty?</code>, any value is accepted.</li> <li>help: See <code>Tablet#help</code>.</li> <li>directives: See <code>Directive</code>.</li> </ul> View source"},{"location":"Tabular/Habit/#Tabular::Habit#argument(*,help,directives)","title":"<code>#argument(*choice, help = \"\", directives : Directable | Nil = nil)</code>","text":"<p>Create a <code>Argument</code>-flavoured <code>Tablet</code>.</p> <ul> <li>choice: Any number of possible values for the argument. If <code>empty?</code>, any value is accepted.</li> <li>help: See <code>Tablet#help</code>.</li> <li>directives: See <code>Directive</code>.</li> </ul> View source"},{"location":"Tabular/Habit/#Tabular::Habit#command(name,aliases,help,directives)","title":"<code>#command(name : String, aliases = [] of String, help = \"\", directives : Directable | Nil = nil)</code>","text":"<p>Create a <code>Command</code>-flavoured <code>Tablet</code>.</p> <ul> <li>name: See <code>Tablet#name</code>.</li> <li>aliases: See <code>Tablet#aliases</code>.</li> <li>help: See <code>Tablet#help</code>.</li> <li>directives: See <code>Directive</code>.</li> </ul> View source"},{"location":"Tabular/Habit/#Tabular::Habit#delimiters(value)","title":"<code>#delimiters(value : String)</code>","text":"<p>Specify the global string of characters that may delimit an <code>Option</code>-falvour <code>Tablet</code>.</p> <pre><code>Tabular.form do\n  # Allows for something like `--option=`\n  delimiters \"=\"\n  # Allows for something like `-option:`\n  delimiters \":\"\n  # Allows for all of the above\n  delimiters \":=\"\nend\n</code></pre> View source"},{"location":"Tabular/Habit/#Tabular::Habit#delimiters","title":"<code>#delimiters : String</code>","text":"<p>Return the global string of characters that may delimit an <code>Option</code>-falvour <code>Tablet</code>.</p> View source"},{"location":"Tabular/Habit/#Tabular::Habit#directives(kind,value)","title":"<code>#directives(kind : Kind, value : Directable)</code>","text":"<p>Sepcify the global <code>Directive</code> for all <code>Tablets</code> of kind.</p> View source"},{"location":"Tabular/Habit/#Tabular::Habit#directives(kind)","title":"<code>#directives(kind : Kind) : Directive</code>","text":"<p>Return the global <code>Directive</code> for all <code>Tablets</code> of kind.</p> View source"},{"location":"Tabular/Habit/#Tabular::Habit#dispatch(&)","title":"<code>#dispatch</code>","text":"<p>Yield control back to the CLI when a <code>Command</code> is matched.</p> View source"},{"location":"Tabular/Habit/#Tabular::Habit#option(name,*,help,directives,delimiters)","title":"<code>#option(name : String, *aliases : String, help = \"\", directives : Directable | Nil = nil, delimiters = Tabular.delimiters)</code>","text":"<p>Create a <code>Option</code>-flavoured <code>Tablet</code>.</p> <ul> <li>name: See <code>Tablet#name</code>.</li> <li>aliases: See <code>Tablet#aliases</code>.</li> <li>help: See <code>Tablet#help</code>.</li> <li>directives: See <code>Directive</code>.</li> <li>delimiters: Ad hoc delimiters that will override [<code>Tabular.delimiters</code>][].</li> </ul> View source"},{"location":"Tabular/Habit/#Tabular::Habit#option(name,*,help,delimiters)","title":"<code>#option(name : String, *aliases, help = \"\", delimiters = Tabular</code>","text":"<p>Create a <code>Option</code>-flavoured <code>Tablet</code> with expected <code>Argument</code>-flavoured <code>Tablet</code>(s).</p> <pre><code>option \"--opt\" do\n  argument \"arg1_choice1\", \"arg1_choice2\", \"arg1_choice3\"\n  argument \"arg2_choice1\", \"arg2_choice2\"\nend\n</code></pre> <ul> <li>name: See <code>Tablet#name</code>.</li> <li>aliases: See <code>Tablet#aliases</code>.</li> <li>help: See <code>Tablet#help</code>.</li> <li>delimiters: Ad hoc delimiters that will override [<code>Tabular.delimiters</code>][].</li> </ul> View source"},{"location":"Tabular/Habit/#Tabular::Habit#size","title":"<code>#size : Int32</code>","text":"<p>Returns the number of <code>Tablets</code> in the <code>Habit</code>.</p> View source"},{"location":"Tabular/Habit/#Tabular::Habit#tablet(kind,*,**)","title":"<code>#tablet(kind : Kind, *args, **kwargs)</code>","text":"<p>Create a <code>Tablet</code>.</p> View source"},{"location":"Tabular/Kind/","title":"Kind","text":""},{"location":"Tabular/Kind/#Tabular::Kind","title":"enum <code>Tabular::Kind</code>","text":"<p>Specifiers that determine the functionality of a <code>Tablet</code>.</p>"},{"location":"Tabular/Kind/#Tabular::Kind-members","title":"Members","text":""},{"location":"Tabular/Kind/#Tabular::Kind::Option","title":"<code>Option = 1</code>","text":"<p>Specifies that a <code>Tablet</code> represents an <code>#option</code> parameter.</p>"},{"location":"Tabular/Kind/#Tabular::Kind::Argument","title":"<code>Argument = 2</code>","text":"<p>Specifies that a <code>Tablet</code> represents an <code>argument</code> parameter.</p>"},{"location":"Tabular/Kind/#Tabular::Kind::Command","title":"<code>Command = 3</code>","text":"<p>Specifies that a <code>Tablet</code> represents an [<code>subcommand</code>][Tabular::Habit#subcommand] parameter.</p>"},{"location":"Tabular/Kind/#Tabular::Kind-methods","title":"Methods","text":""},{"location":"Tabular/Kind/#Tabular::Kind#argument?","title":"<code>#argument?</code>","text":"<p>Returns <code>true</code> if this enum value equals <code>Argument</code></p> View source"},{"location":"Tabular/Kind/#Tabular::Kind#command?","title":"<code>#command?</code>","text":"<p>Returns <code>true</code> if this enum value equals <code>Command</code></p> View source"},{"location":"Tabular/Kind/#Tabular::Kind#directives","title":"<code>#directives</code>","text":"<p>Returns the default <code>Directive</code> of the <code>Kind</code>.</p> <ul> <li><code>Argument</code> \u2014 <code>None</code></li> <li>All others \u2014 <code>NoFile</code></li> </ul> View source"},{"location":"Tabular/Kind/#Tabular::Kind#option?","title":"<code>#option?</code>","text":"<p>Returns <code>true</code> if this enum value equals <code>Option</code></p> View source"},{"location":"Tabular/Kind/#Tabular::Kind#runnable?","title":"<code>#runnable?</code>","text":"<p>Returns <code>true</code> if the <code>Tablet</code> represented by the <code>Kind</code> should hand control back to the CLI when matched. Only <code>Command</code> is runnable.</p> View source"},{"location":"Tabular/Log/","title":"Log","text":""},{"location":"Tabular/Log/#Tabular::Log","title":"enum <code>Tabular::Log</code>","text":"<p>A logger in which each member represents a logging level. Setting the <code>$TABULAR_LOG_LEVEL</code> environment variable from the shell to a file path directs all logging to that file.</p>"},{"location":"Tabular/Log/#Tabular::Log-members","title":"Members","text":""},{"location":"Tabular/Log/#Tabular::Log::Fatal","title":"<code>Fatal = 1</code>","text":"<p>A serious error, indicating that the program itself may be unable to continue running.</p>"},{"location":"Tabular/Log/#Tabular::Log::Error","title":"<code>Error = 2</code>","text":"<p>Due to a more serious problem, the software has not been able to perform some function.</p>"},{"location":"Tabular/Log/#Tabular::Log::Warn","title":"<code>Warn = 3</code>","text":"<p>An indication that something unexpected happened, or that a problem might occur in the near future.</p>"},{"location":"Tabular/Log/#Tabular::Log::Info","title":"<code>Info = 4</code>","text":"<p>Confirmation that things are working as expected.</p>"},{"location":"Tabular/Log/#Tabular::Log::Debug","title":"<code>Debug = 5</code>","text":"<p>Detailed information, typically only of interest to a developer trying to diagnose a problem.</p>"},{"location":"Tabular/Log/#Tabular::Log-class-methods","title":"Class methods","text":""},{"location":"Tabular/Log/#Tabular::Log.level=(value)","title":"<code>.level=(value : UInt32)</code>","text":"<p>Set the global logging level.</p> View source"},{"location":"Tabular/Log/#Tabular::Log.out(*)","title":"<code>.out(*msg)</code>","text":"<p>Send output to <code>STDOUT</code>.</p> View source"},{"location":"Tabular/Log/#Tabular::Log.silence","title":"<code>.silence</code>","text":"<p>Silence all output, for testing.</p> View source"},{"location":"Tabular/Log/#Tabular::Log-methods","title":"Methods","text":""},{"location":"Tabular/Log/#Tabular::Log#debug?","title":"<code>#debug?</code>","text":"<p>Returns <code>true</code> if this enum value equals <code>Debug</code></p> View source"},{"location":"Tabular/Log/#Tabular::Log#error?","title":"<code>#error?</code>","text":"<p>Returns <code>true</code> if this enum value equals <code>Error</code></p> View source"},{"location":"Tabular/Log/#Tabular::Log#fatal?","title":"<code>#fatal?</code>","text":"<p>Returns <code>true</code> if this enum value equals <code>Fatal</code></p> View source"},{"location":"Tabular/Log/#Tabular::Log#info?","title":"<code>#info?</code>","text":"<p>Returns <code>true</code> if this enum value equals <code>Info</code></p> View source"},{"location":"Tabular/Log/#Tabular::Log#send(msg)","title":"<code>#send(msg)</code>","text":"<p>Send <code>journald</code> output to <code>$TABULAR_LOG_FILE</code> (defaults to <code>File::NULL</code>).</p> View source"},{"location":"Tabular/Log/#Tabular::Log#show(*)","title":"<code>#show(*msg)</code>","text":"<p>Send pretty output to <code>$TABULAR_LOG_FILE</code> (defaults to <code>File::NULL</code>).</p> View source"},{"location":"Tabular/Log/#Tabular::Log#warn?","title":"<code>#warn?</code>","text":"<p>Returns <code>true</code> if this enum value equals <code>Warn</code></p> View source"},{"location":"Tabular/Replier/","title":"Replier","text":""},{"location":"Tabular/Replier/#Tabular::Replier","title":"alias <code>Tabular::Replier</code>","text":"Alias definition <code>Tabular::Tablet -&gt; Bool</code>"},{"location":"Tabular/Tablet/","title":"Tablet","text":""},{"location":"Tabular/Tablet/#Tabular::Tablet","title":"struct <code>Tabular::Tablet</code> inherits <code>Struct</code>","text":"<p>Represents a parameter whose name and aliases may be suggested and matched during tab completion.</p>"},{"location":"Tabular/Tablet/#Tabular::Tablet-constants","title":"Constants","text":""},{"location":"Tabular/Tablet/#Tabular::Tablet::NONE","title":"<code>NONE = Tablet.new(:none)</code>","text":"<p>Basically, <code>Tablet?</code> minus the baggage.</p>"},{"location":"Tabular/Tablet/#Tabular::Tablet-constructors","title":"Constructors","text":""},{"location":"Tabular/Tablet/#Tabular::Tablet.new(kind,name,aliases,help,directives,delimiters)","title":"<code>.new(kind : Kind, name : String = \"\", aliases = [] of String, help = \"\", directives : Directable | Nil = nil, delimiters = Tabular.delimiters)</code>","text":"<p>Create a new <code>Tablet</code>.</p> <ul> <li>kind: See <code>#kind</code>.</li> <li>name: See <code>#name</code>.</li> <li>aliases: See <code>#aliases</code>.</li> <li>help: See <code>#help</code>.</li> <li>directives: See <code>#directives</code>.</li> <li>delimiters: Ad hoc delimiters that will override [<code>Tabular.delimiters</code>][].</li> </ul> View source"},{"location":"Tabular/Tablet/#Tabular::Tablet-methods","title":"Methods","text":""},{"location":"Tabular/Tablet/#Tabular::Tablet#aliases","title":"<code>#aliases</code>","text":"<p>A list of additional names the <code>Tablet</code> will suggest/match.</p> View source"},{"location":"Tabular/Tablet/#Tabular::Tablet#candidate(arg,&)","title":"<code>#candidate(arg : String, &amp; : String -&gt; )</code>","text":"<p>Yield suggestions for any names that contain arg.</p> View source"},{"location":"Tabular/Tablet/#Tabular::Tablet#directives","title":"<code>#directives</code>","text":"<p>Additional directives the <code>Tablet</code> will send to the shell if suggested.</p> View source"},{"location":"Tabular/Tablet/#Tabular::Tablet#form?","title":"<code>#form?</code>","text":"<p>Return <code>true</code> if a nested form exists.</p> View source"},{"location":"Tabular/Tablet/#Tabular::Tablet#help","title":"<code>#help</code>","text":"<p>The description of the parameter the <code>Tablet</code> represents.</p> View source"},{"location":"Tabular/Tablet/#Tabular::Tablet#kind","title":"<code>#kind</code>","text":"<p>The representation of the <code>Tablet</code>.</p> View source"},{"location":"Tabular/Tablet/#Tabular::Tablet#match!(arg)","title":"<code>#match!(arg : String)</code>","text":"<p>Returns <code>self</code> if arg is an exact match of any names. Otherwise, raise <code>Error::Match</code>.</p> View source"},{"location":"Tabular/Tablet/#Tabular::Tablet#match?(arg)","title":"<code>#match?(arg : String) : Bool</code>","text":"<p>Return <code>true</code> if arg is an exact match of any names.</p> View source"},{"location":"Tabular/Tablet/#Tabular::Tablet#name","title":"<code>#name</code>","text":"<p>The name of the parameter the <code>Tablet</code> represents.</p> View source"},{"location":"Tabular/Tablet/#Tabular::Tablet#next(&)","title":"<code>#next</code>","text":"<p>For an <code>Option</code>-flavoured <code>Tablet</code> with <code>#form?</code>, yield the next <code>Argument</code>-flavoured <code>Tablet</code> to the specified <code>&amp;block</code>.</p> View source"},{"location":"Tabular/Tablet/#Tabular::Tablet#to_s(io)","title":"<code>#to_s(io : IO)</code>","text":"<p>Same as <code>#inspect(io)</code>.</p> View source"},{"location":"Tabular/Tablets/","title":"Tablets","text":""},{"location":"Tabular/Tablets/#Tabular::Tablets","title":"alias <code>Tabular::Tablets</code>","text":"<p>A collection of <code>Tablet</code> instances.</p> Alias definition <code>Set(Tabular::Tablet)</code>"},{"location":"about/changelog/","title":"Changelog","text":""},{"location":"about/changelog/#010","title":"0.1.0","text":"<ul> <li>build: mimic functionality of <code>go-cobra</code> completions</li> <li>include: basic documentation</li> <li>todo: add tests</li> <li>todo: support <code>powershell</code> (?)</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 Arian Johnson i.am@ajohn.dev</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"contributing/","title":"Contributing","text":"<ol> <li>Fork it (https://github.com/leshaunj/tabular/fork)</li> <li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li> <li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li> <li>Push to the branch (<code>git push origin my-new-feature</code>)</li> <li>Create a new Pull Request</li> </ol>"},{"location":"contributing/#contributors","title":"Contributors","text":"<ul> <li>Arian Johnson - creator and maintainer</li> </ul>"},{"location":"contributing/code_of_conduct/","title":"Code of Conduct","text":""},{"location":"contributing/code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"contributing/code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the   overall community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or   advances of any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email   address, without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"contributing/code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"contributing/code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"contributing/code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at i.am@ajohn.dev. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"contributing/code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"contributing/code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"contributing/code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"contributing/code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"contributing/code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior,  harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"contributing/code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"}]}